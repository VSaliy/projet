@startuml


class AbstractCore{
- finale Logger LOG
+String execute(String command, ArrayList<Object> args)
~void sendUnicast(InetAddress hostname, String message)
~void sendMulticast(String message)
~void stop()
~boolean isServer()
}


class ClientCore{
-Logger LOG
-MulticastClient multicast
-UnicastClient client
-File fileToSend
-Track trackToSend
~ServerSessionManager serverSessionManager
+ClientCore()
+String END_OF_COMMUNICATION(ArrayList<Object> args)
+String PLAYLIST_UPDATE(ArrayList<Object> args)
+String SEND_FIRST_CONNECTION(ArrayList<Object> args)
+String SEND_TRACK_REQUEST(ArrayList<Object> args)
+String SEND_PLAY_PAUSE_REQUEST(ArrayList<Object> args)
...()
}

class Core{
- AbstractCore instance



+ static String execute(String command, ArrayList<Object> args)
+static boolean isServer()
+ static void setupAsServer()
+ static setupAsClient()
+ static void stop()
}

class ServerCore{
-final Logger LOG
-int TIME_BEFORE_PLAYLIST_UPDATE
-final String name
~MulticastClient multicast
~Server server
~UserSessionManager userSessionManager
~ScheduledExecutorService broadcastPlaylist
+ ServerCore()
+ String END_OF_COMMUNICATION(ArrayList<Object> args)
+ String SEND_PLAYLIST_UPDATE(ArrayList<Object> args)
+ String NEW_ACTIVE_CLIENT(ArrayList<Object> args)
+ String TRACK_REQUEST(ArrayList<Object> args)
+ String SENDING_TRACK(ArrayList<Object> args)
+ String UPVOTE_TRACK_REQUEST(ArrayList<Object> args)
+String DOWNVOTE_TRACK_REQUEST(ArrayList<Object> args)

}

class ICore{
~ void sendUnicast(InetAddress hostname, String message)
~ void sendMulticast(String message)
~ void stop()
}

AbstractCore<--ClientCore
AbstractCore<--Core
AbstractCore<--ServerCore
ICore<..ClientCore
ICore<..ServerCore
@enduml
