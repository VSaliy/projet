@startuml


class AbstractCore{
- finale Logger LOG
+String execute(String command, ArrayList<Object> args)
~void sendUnicast(InetAddress hostname, String message)
~void sendMulticast(String message)
~void stop()
~boolean isServer()
}


class ClientCore{
-Logger LOG
-MulticastClient multicast
-UnicastClient client
-File fileToSend
-Track trackToSend
~ServerSessionManager serverSessionManager
+ClientCore()
+String END_OF_COMMUNICATION(ArrayList<Object> args)
+String PLAYLIST_UPDATE(ArrayList<Object> args)
+String SEND_FIRST_CONNECTION(ArrayList<Object> args)
+String SEND_TRACK_REQUEST(ArrayList<Object> args)
+String SEND_PLAY_PAUSE_REQUEST(ArrayList<Object> args)
...()
}

class Core{
- AbstractCore instance



+ static String execute(String command, ArrayList<Object> args)
+static boolean isServer()
+ static void setupAsServer()
+ static setupAsClient()
+ static void stop()
}

class ServerCore{
-final Logger LOG
-int TIME_BEFORE_PLAYLIST_UPDATE
-final String name
~MulticastClient multicast
~Server server
~UserSessionManager userSessionManager
~ScheduledExecutorService broadcastPlaylist
+ ServerCore()
+ String END_OF_COMMUNICATION(ArrayList<Object> args)
+ String SEND_PLAYLIST_UPDATE(ArrayList<Object> args)
+ String NEW_ACTIVE_CLIENT(ArrayList<Object> args)
+ String TRACK_REQUEST(ArrayList<Object> args)
+ String SENDING_TRACK(ArrayList<Object> args)
+ String UPVOTE_TRACK_REQUEST(ArrayList<Object> args)
+String DOWNVOTE_TRACK_REQUEST(ArrayList<Object> args)

}

class ICore{
~ void sendUnicast(InetAddress hostname, String message)
~ void sendMulticast(String message)
~ void stop()
}

class DatabaseManager{
- final Logger LOG
-static DatabaseManager instance
-SessionFactory factory
-Session session
-Transaction transaction
-DatabaseManager()
+DatabaseManager getInstance()
+Session getSession()
+void execute(Query query)
+void save(Object object)
+void delete(Object object)
+void update(Object object)
+void close()
}
class FileManager{
- final Logger LOG
- static FileManager instance
+ Static OUTPUT_DIRECTORY

-FileManager()
+FileManager getInstance()
+File retrieveFile(InputStream inputStream, int fileSize)
+String getFormatExtension(File file)
+byte[] getBytes(File file, int nbBytes)
+void delete(File fileToDelete)
+void rename(File file, File newFilename)
+String getMD5Checksum(File file)
}

class FilesFormats{

+final byte[] MP3_HEADER
+final int MP3_HEADER_OFFSET
+final String MP3_EXTENSION
+final byte[] M4A_HEADER
+final int M4A_HEADER_OFFSET
+final String M4A_EXTENSION
+ final byte[] WAV_HEADER
+final int WAV_HEADER_OFFSET
+final String WAV_EXTENSION

}
class EphemeralPlaylist{
-final Logger LOG
-ObservableSortedPlaylistTrackList tracksList
-SavedPlaylist delegate

+EphemeralPlaylist(String playlistName)
+boolean downvoteTrack(Track track)
+boolean upvoteTrack(Track track)
+ObservableSortedPlaylistTrackList getTracksList()

}

class SavedPlaylist{
-Integer id
-String name
-Date dateAdded
-Date datePlayed
...
+SavedPlaylist()
+SavedPlaylist(String name)
}

class Track{
-String id
-String title
-String artist
-String album
-String urI
...

+Track()
+Track(String id, String title, String artist, String album, ..)
+Track(AudioFile audioFile)
+BooleanProperty getFavoritedProperty()
+void setFavoritedProperty(boolean favorited)


}

class IPlaylist{
~boolean addTrack(Track track)
~boolean contains(Track track)
~PlaylistTrack getPlaylistTrack(Track track)
~ List<PlaylistTrack> getTracksList()
~boolean isSaved()
}

class Player{
-final Logger LOG
-static Player currentPlayer
-MediaPlayer player
-IntegerProperty currentTimeProperty
-PlaylistTrackProperty currentTrackProperty
...

+BooleanProperty getIsPlayingProperty()
+boolean isPlaying()
+void play()
+void pause()
+void stop()
+void lowerVolume()

}
class PlaylistTrackId{
- SavedPlaylist playlist
- Track track
+ PlaylistTrackId()
+ PlaylistTrackId(SavedPlaylist playlist, Track track)
+ void setPlaylist(SavedPlaylist playlist)
+ SavedPlaylist getPlaylist()
+ void setTrack(Track track)
+ Track getTrack()
+boolean equals(Object object)
+int hashCode()

}

class PlaylistTrack{
- PlaylistTrackId id
- BooleanProperty beenPlayedProperty
- Integer votes
- IntegerProperty votesProperty
+PlaylistTrack(SavedPlaylist playlist, Track track)
+BooleanProperty getBeenPlayedProperty()
+SavedPlaylist getPlaylist()
+Track getTrack()
+IntegerProperty getVotesProperty()
+PlaylistTrackId getId()
+ void upvote()
+ void downvote()
....()



}

class VoteComparator{
+ int compare(PlaylistTrack x, PlaylistTrack y)

}

class PlaylistManager{
- final Logger LOG
-static PlaylistManager instance
-List<SavedPlaylist> savedPlaylists
-EphemeralPlaylist playlist
-SavedPlaylist favoritesPlaylist
-PlaylistManager()

PlaylistManager getInstance()
EphemeralPlaylist getPlaylist()
SavedPlaylist createPlaylist(String name)
void removePlaylist(SavedPlaylist playlist)
...()
}
class ISession{
+ Integer getId()
+ void update()
+ Date getLastUpdate()

}

class ISessionManager{
void stop()
}

class ServerSession{
-Integer id
-InetAddress serverIp
-String serverName
-Date updated
+ServerSession(Integer id, InetAddress serverIp, String serverName)
+void update()
+Date getLastUpdate()
...()
}

class ServerSessionManager{
- Logger LOG
- ObservableMap<Integer, ServerSession> availableServers
-ScheduledExecutorService scheduledExecutorService
-ServerSessionManager instance

- ServerSessionManager()
+ ServerSessionManager getInstance()
+void store(Integer id, InetAddress serverIp, String serverName)
+ObservableMap<Integer, ServerSession> getAvailableServers()
+void serverChooser(Map<Integer, ServerSession> serverList)
+void deleteObsoleteSessions()
+void stop()
}

class UserSessionManager{
- Logger LOG
- UserSessionManager instance
- Map<Integer, UserSession> activeSessions
- Map<Integer, UserSession> inactiveSessions
-Set<Integer> usersAskedForPlayPause
-Set<Integer> usersAskedForNextTrack
-...
+ UserSessionManager()
+ void store(Integer id)
+ int countActiveSessions()
+ int countInactiveSessions()
+ int countPlayPauseRequests()
+ void downvote(Integer userId, String trackId)
....()
}
 class UserSession {
- Integer id
- Date updated
- Set<String> upvotedTracks
- Set<String> downvotedTracks
+ UserSession(Integer id)
+ Set<String> getUpvotedTracks()
+ Set<String> getDownvotedTracks()
+ void addUpvotedTrack(String trackId)
+ void addDownvotedTrack(String trackId)
...()
 }

 class PlaylistsListView{
 -final String CSS_FILE
 -final String FXML_FILE
 -static PlaylistManager manager
 ~Label favoritesLabel
 ~Label playingLabel
 ~ListView<SavedPlaylist> playlistsView
 + PlaylistsListView()
 +void refresh()
 -void loadFavoritesPlaylist(MouseEvent e)
 -void loadFavoritesPlaylist(MouseEvent e)
 }


 class UIController{
 -final Logger LOG
 -IPlaylist currentPlaylist
 -String FXML_FILE
 -PlaylistsListView playlistsListView
 -TracksListView tracksListView
 +UIController getController()
 +void showPlaylist(IPlaylist playlist)
 +void refreshPlaylist()
 +void refreshPlaylistsList()
 +IPlaylist getCurrentPlaylist()
 +void showAlert(String title, String message, Alert.AlertType type)
 ...()
 }

 class TracksListView{
 - static Logger LOG
 - static PlaylistManager playlistManager


 + TracksListView()
 +void showPlaylist(IPlaylist playlist)
 +void initializeDragAndDrop()
 }

 class Commusica{
 -final Logger LOG
+static void main(String[] args)
 }
 class Logger{
 -final boolean DEBUG
 -String className
 + Logger(String className)
 - void log(Level level, String message)
 -....()
 }

Logger <-- Commusica
AbstractCore <-- Core
AbstractCore <-- ServerCore
AbstractCore <--ClientCore
Logger<--AbstractCore
Logger<--FileManager

EphemeralPlaylist<--PlaylistManager
ObservableSortedPlaylistTrackList <--EphemeralPlaylist
Logger <--EphemeralPlaylist
Track <--EphemeralPlaylist
SavedPlaylist<-- EphemeralPlaylist
IPlaylist <.. EphemeralPlaylist

SavedPlaylist<--PlaylistManager
SavedPlaylist<--PlaylistsListView
SavedPlaylist<--PlaylistTrackId
IPlaylist <..SavedPlaylist


MulticastClient<--ClientCore
      ICore  <..ClientCore
      Track  <--ClientCore
      Logger <--ClientCore
      ServerSessionManager <--ClientCore
      FileManager        <--ClientCore
      UnicastClient        <--ClientCore

Track <--SavedPlaylist
Track <--PlaylistManager
Track <--Player
Track <--PlaylistTrackCell
Track <--PreviousTrackView
Track <--PlaylistTrackProperty
Track <--PlaylistTrackId

Server<--ServerCore
Logger<--Server

  Logger<--UnicastClient

  ServerSession<--SettingsView
  ServerSession<--ServerSessionManager
  ISession<..ServerSession

  ISessionManager<--ServerSessionManager

  PlaylistManager<--TracksListView
  PlaylistManager<--CurrentTrackView
  PlaylistManager<--PlaylistsListView

UserSession<--UserSessionManager
ISession<..UserSession

PlaylistTrack<--PlaylistTrackCell
PlaylistTrack<--ObservableSortedPlaylistTrackList
PlaylistTrack<--VoteComparator
PlaylistTrackId<--PlaylistTrack

UserSessionManager<--ServerCore
TracksListView<--UserSessionManager
Player<--PlayerControlsView
Player<--CurrentTrackView
Player<--PreviousTrackView
PlaylistTrackProperty<--Player
TracksListView <-- UIController
PlaylistsListView <-- UIController

Logger<--DatabaseManager


@enduml
