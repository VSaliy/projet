@startuml

    namespace ch.tofind.commusica.session {

        class ServerSessionManager {
            [[ServerSessionManager.html]]
            {static} -LOG: Logger
            {static} -instance: ServerSessionManager
            {static} -availableServers: ObservableMap<Integer, ServerSession>
            -scheduledExecutorService: ScheduledExecutorService
            {static} +getInstance(): ServerSessionManager
            +store(Integer, InetAddress, String): void
            +getAvailableServers(): ObservableMap<Integer, ServerSession>
            -deleteObsoleteSessions(): void
            +clear(): void
            +stop(): void
        }

        class UserSessionManager {
            [[UserSessionManager.html]]
            {static} -LOG: Logger
            {static} -instance: UserSessionManager
            -activeSessions: Map<Integer, UserSession>
            -inactiveSessions: Map<Integer, UserSession>
            -usersAskedForPlayPause: Set<Integer>
            -usersAskedForNextTrack: Set<Integer>
            -usersAskedForPreviousTrack: Set<Integer>
            -usersAskedToTurnVolumeUp: Set<Integer>
            -usersAskedToTurnVolumeDown: Set<Integer>
            -scheduledExecutorService: ScheduledExecutorService
            {static} +getInstance(): UserSessionManager
            +store(Integer): void
            +countActiveSessions(): int
            +countInactiveSessions(): int
            +countPlayPauseRequests(): int
            +countNextTrackRequests(): int
            +countPreviousTrackRequests(): int
            +countTurnVolumeUpRequests(): int
            +countTurnVolumeDownRequests(): int
            +playPause(Integer): void
            +previousTrack(Integer): void
            +nextTrack(Integer): void
            +upvote(Integer, String): void
            +downvote(Integer, String): void
            +turnVolumeUp(Integer): void
            +turnVolumeDown(Integer): void
            +resetNextTrackRequests(): void
            +resetPreviousTrackRequests(): void
            +resetTurnVolumeUpRequests(): void
            +resetTurnVolumeDownRequests(): void
            +resetPlayPauseRequests(): void
            -deleteObsoleteSessions(): void
            +stop(): void
        }

        interface ISession {
            [[ISession.html]]
            {abstract} +getId(): Integer
            {abstract} +update(): void
            {abstract} +getLastUpdate(): Date
        }

        class ServerSession {
            [[ServerSession.html]]
            -id: Integer
            -serverIp: InetAddress
            -serverName: String
            -updated: Date
            +ServerSession(Integer, InetAddress, String)
            +getServerIp(): InetAddress
            +getServerName(): String
            +getId(): Integer
            +update(): void
            +getLastUpdate(): Date
        }

        interface ISessionManager {
            [[ISessionManager.html]]
            {static} +TIME_BEFORE_SESSION_INACTIVE: int
            {abstract} +stop(): void
        }

        class UserSession {
            [[UserSession.html]]
            -id: Integer
            -updated: Date
            -upvotedTracks: Set<String>
            -downvotedTracks: Set<String>
            +UserSession(Integer)
            +getUpvotedTracks(): Set<String>
            +getDownvotedTracks(): Set<String>
            +addUpvotedTrack(String): void
            +addDownvotedTrack(String): void
            +getId(): Integer
            +update(): void
            +getLastUpdate(): Date
        }

        ISessionManager <|.. ServerSessionManager

        ISessionManager <|.. UserSessionManager

        ISession <|.. ServerSession

        ISession <|.. UserSession

    }

@enduml
